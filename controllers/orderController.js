const db = require('../config/db');

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
const createOrder = async (req, res) => {
    try {
        const { services, total_price, vin } = req.body;
        const user_id = req.user?.id;

        console.log('üìù –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:', { user_id, services, total_price, vin });

        if (!services || !Array.isArray(services) || services.length === 0) {
            console.warn('‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–≤—ñ—Å—ñ–≤:', services);
            return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–≤—ñ—Å—ñ–≤' });
        }
        if (!vin || typeof vin !== 'string') {
            console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π VIN-–∫–æ–¥:', vin);
            return res.status(400).json({ message: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π VIN-–∫–æ–¥' });
        }
        if (!user_id) {
            console.warn('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
            return res.status(401).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π' });
        }

        console.log('üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥ –¥–ª—è VIN:', vin);

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID —Ç–∞ —Ü—ñ–Ω —Å–µ—Ä–≤—ñ—Å—ñ–≤, –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–ª—è —Ü—å–æ–≥–æ VIN
        const [servicesForVin] = await db.execute('SELECT id, price FROM services WHERE vin_code = ?', [vin]);
        console.log('‚úÖ –ü–æ—Å–ª—É–≥–∏, –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è VIN:', servicesForVin);

        const availableServicesMap = new Map(servicesForVin.map(service => [service.id, parseFloat(service.price)])); // –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ü—ñ–Ω—É –≤ —á–∏—Å–ª–æ

        // –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –Ω–∞ —Ç—ñ, —â–æ –ø—ñ–¥—Ö–æ–¥—è—Ç—å, —ñ —Ç—ñ, —â–æ –Ω—ñ
        console.log('‚ö° –û—Ç—Ä–∏–º–∞–Ω—ñ ID –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:', services);
        const validServices = services.filter(serviceId => availableServicesMap.has(serviceId));
        const invalidServices = services.filter(serviceId => !availableServicesMap.has(serviceId));

        console.log('üéØ –í–∞–ª—ñ–¥–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:', validServices);
        console.log('‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:', invalidServices);

        // –Ø–∫—â–æ –∂–æ–¥–Ω–∞ –ø–æ—Å–ª—É–≥–∞ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å, –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        if (validServices.length === 0) {
            console.warn('üö´ –ñ–æ–¥–µ–Ω —Å–µ—Ä–≤—ñ—Å –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —Ü—å–æ–≥–æ VIN.');
            return res.status(400).json({
                message: '–ñ–æ–¥–µ–Ω –∑ –≤–∏–±—Ä–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Ü—å–æ–≥–æ VIN-–∫–æ–¥—É',
                invalidServices
            });
        }

        // –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Ü—ñ–Ω–∏
        const recalculatedTotalPrice = validServices.reduce((sum, serviceId) => sum + availableServicesMap.get(serviceId), 0);
        console.log('üí∞ –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞:', recalculatedTotalPrice);

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        console.log('üõí –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', user_id);
        const [orderResult] = await db.execute(
            'INSERT INTO orders (user_id, total_price, status) VALUES (?, ?, ?)',
            [user_id, recalculatedTotalPrice.toFixed(2), 'Pending']
        );
        const orderId = orderResult.insertId;
        console.log('‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ, ID:', orderId);

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        for (const serviceId of validServices) {
            console.log(`‚ûï –î–æ–¥–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å ${serviceId} —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}`);
            await db.execute(
                'INSERT INTO order_services (order_id, service_id) VALUES (?, ?)',
                [orderId, serviceId]
            );
        }

        // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —á–∞—Å—Ç–∫–æ–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–æ—Å–ª—É–≥–∏
        const responseMessage = invalidServices.length > 0
            ? `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∞–ª–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –≤–∞—à–æ–≥–æ VIN: ${invalidServices.join(', ')}` 
            : '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ';

        console.log('üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É:', {
            message: responseMessage,
            orderId,
            validServices,
            invalidServices,
            recalculatedTotalPrice
        });

        res.status(201).json({
            message: responseMessage,
            orderId,
            validServices,
            invalidServices,
            recalculatedTotalPrice
        });

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
    }
};




// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getOrdersForUser = async (req, res) => {
    const userId = req.user.id;  // –û—Ç—Ä–∏–º—É—î–º–æ userId –∑ —Ç–æ–∫–µ–Ω–∞
    console.log(`User ID from token: ${userId}`);

    try {
        const [orders] = await db.execute(
            `SELECT o.id AS order_id, o.user_id, o.status, o.created_at, o.updated_at,
                    s.id AS service_id, s.service_name, s.price, s.vin_code
             FROM orders o
             LEFT JOIN order_services os ON o.id = os.order_id
             LEFT JOIN services s ON os.service_id = s.id
             WHERE o.user_id = ?`,
            [userId]  // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ user_id
        );

        if (orders.length === 0) {
            return res.status(404).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        const ordersWithDetails = [];
        let currentOrder = null;

        orders.forEach(order => {
            // –Ø–∫—â–æ —Ü–µ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –Ω–æ–≤–∏–π order)
            if (!currentOrder || currentOrder.id !== order.order_id) {
                if (currentOrder) {
                    ordersWithDetails.push(currentOrder);
                }
                currentOrder = {
                    id: order.order_id,
                    user_id: order.user_id,
                    total_price: 0,
                    status: order.status,
                    created_at: order.created_at,
                    updated_at: order.updated_at,
                    services: [],
                };
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ NaN –≤ –∑–∞–≥–∞–ª—å–Ω—ñ–π –≤–∞—Ä—Ç–æ—Å—Ç—ñ
            const servicePrice = parseFloat(order.price);
            if (!isNaN(servicePrice)) {
                // –î–æ–¥–∞—î–º–æ –ø–æ—Å–ª—É–≥—É –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                currentOrder.services.push({
                    id: order.service_id,
                    name: order.service_name,
                    price: servicePrice,
                    vin_code: order.vin_code,
                });

                // –î–æ–¥–∞—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥–∏ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ
                currentOrder.total_price += servicePrice;
            }
        });

        // –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –º–∞—Å–∏–≤
        if (currentOrder) {
            ordersWithDetails.push(currentOrder);
        }

        res.json(ordersWithDetails);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å' });
    }
};



// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
const updateOrderStatus = async (req, res) => {
    const { orderId } = req.params;
    const { status } = req.body;

    try {
        const validStatuses = ['Pending', 'Confirmed', 'Completed', 'Paid'];
        if (!validStatuses.includes(status)) {
            return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
        }

        const [result] = await db.execute(
            'UPDATE orders SET status = ? WHERE id = ?',
            [status, orderId]
        );
        
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        res.json({ message: '–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
    }
};

// –û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
const payForOrder = async (req, res) => {
    const userId = req.user.id;  // –ë–µ—Ä–µ–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω—É
    const { orderId } = req.params;  // ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        const [order] = await connection.execute(
            'SELECT id, user_id, total_price, status FROM orders WHERE id = ? AND user_id = ?',
            [orderId, userId]
        );

        if (order.length === 0) {
            await connection.rollback();
            return res.status(404).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        // –î–æ–∑–≤–æ–ª—è—î–º–æ –æ–ø–ª–∞—Ç—É –¥–ª—è —Å—Ç–∞—Ç—É—Å—ñ–≤ 'Pending' —Ç–∞ 'Completed'
        if (order[0].status !== 'Pending' && order[0].status !== 'Completed') {
            await connection.rollback();
            return res.status(400).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –æ–ø–ª–∞—á–µ–Ω–æ' });
        }

        const orderTotalPrice = parseFloat(order[0].total_price);

        // –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const [user] = await connection.execute('SELECT balance FROM users WHERE id = ?', [userId]);
        if (user.length === 0) {
            await connection.rollback();
            return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π' });
        }

        let userBalance = parseFloat(user[0].balance || 0);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –æ–ø–ª–∞—Ç–∏
        if (userBalance < orderTotalPrice) {
            await connection.rollback();
            return res.status(400).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –æ–ø–ª–∞—Ç–∏' });
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ "Paid"
        await connection.execute('UPDATE orders SET status = "Paid" WHERE id = ?', [orderId]);
        // –ó–º–µ–Ω—à—É—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Å—É–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        await connection.execute('UPDATE users SET balance = balance - ? WHERE id = ?', [orderTotalPrice, userId]);

        await connection.commit();  // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        return res.json({ 
            message: '–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–∞', 
            newBalance: userBalance - orderTotalPrice  // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        });
    } catch (error) {
        await connection.rollback();  // –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –≤—ñ–¥–∫–∞—Ç—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
        return res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç—ñ', error: error.message });
    } finally {
        connection.release();  // –ó–∞–≤–∂–¥–∏ –∑–≤—ñ–ª—å–Ω—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    }
};



// –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
const resetOrderStatus = async (req, res) => {
    const { orderId } = req.params;

    try {
        const [result] = await db.execute(
            'UPDATE orders SET status = "Pending" WHERE id = ?',
            [orderId]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        res.json({ message: '–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "Pending"' });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};
// –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
const cancelOrder = async (req, res) => {
    
    const orderId = req.params.id;
    console.log('Order ID on server:', orderId);
    console.log('Order ID on server:', orderId); // –õ–æ–≥—É–≤–∞–Ω–Ω—è ID –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è orderId
    console.log('Order ID:', orderId);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ orderId
    if (!orderId) {
        return res.status(400).json({ message: 'ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ' });
    }

    try {
        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —ñ—Å–Ω—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ç–∞–∫–∏–º ID
        const [order] = await db.execute('SELECT * FROM orders WHERE id = ?', [orderId]);

        // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        console.log('Order found:', order);

        if (order.length === 0) {
            return res.status(404).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        if (order[0].status !== 'Pending') {
            return res.status(400).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏, —Ç–æ–º—É —â–æ –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å –Ω–µ "Pending"' });
        }

        // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ order_services
        await db.execute('DELETE FROM order_services WHERE order_id = ?', [orderId]);

        // –ü–æ—Ç—ñ–º –≤–∏–¥–∞–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ç–∞–±–ª–∏—Ü—ñ orders
        const [result] = await db.execute('DELETE FROM orders WHERE id = ? AND status = "Pending"', [orderId]);

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è' });
        }

        res.status(200).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
    }
};




// –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
const completeOrder = async (req, res) => {
    const { orderId } = req.params;

    try {
        const [order] = await db.execute(
            'SELECT status FROM orders WHERE id = ?',
            [orderId]
        );

        if (order.length === 0) {
            return res.status(404).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        const currentStatus = order[0].status;

        if (currentStatus !== 'Pending' && currentStatus !== 'Confirmed') {
            return res.status(400).json({ message: '–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—ñ' });
        }

        await db.execute(
            'UPDATE orders SET status = "Completed" WHERE id = ?',
            [orderId]
        );

        res.json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ' });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' });
    }
};

const validateServiceByVin = async (req, res) => {
    try {
        const { serviceId, userVin } = req.body;

        if (!serviceId || !userVin) {
            return res.status(400).json({ message: '–ù–µ –≤–∫–∞–∑–∞–Ω—ñ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ.' });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Å–µ—Ä–≤—ñ—Å —Ç–∞ —á–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å VIN-–∫–æ–¥
        const [service] = await db.query(
            'SELECT vin_code FROM services WHERE id = ? LIMIT 1', 
            [serviceId]
        );

        if (!service || service.length === 0) {
            return res.status(404).json({ message: '–°–µ—Ä–≤—ñ—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.' });
        }

        if (service[0].vin_code && service[0].vin_code !== userVin) {
            return res.status(400).json({ message: '–¶–µ–π —Å–µ—Ä–≤—ñ—Å –Ω–µ—Å—É–º—ñ—Å–Ω–∏–π –∑ –≤–∞—à–∏–º –∞–≤—Ç–æ.' });
        }

        res.json({ message: '–°–µ—Ä–≤—ñ—Å –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏.' });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ VIN-–∫–æ–¥—É:', error);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.' });
    }
};


// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const getOrderHistory = async (req, res) => {
    const userId = Number(req.params.userId);
    
    try {
        // 1. –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        const [orders] = await db.execute(`
            SELECT o.id, o.total_price, o.status, o.created_at, o.updated_at
            FROM orders o
            WHERE o.user_id = ?
            ORDER BY o.created_at DESC
        `, [userId]);

        if (!orders.length) {
            return res.status(404).json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        // 2. –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–ª—É–≥–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        const ordersWithServices = await Promise.all(orders.map(async (order) => {
            const [services] = await db.execute(`
                SELECT s.id, s.service_name, s.price
                FROM order_services os
                JOIN services s ON os.service_id = s.id
                WHERE os.order_id = ?
            `, [order.id]);

            return {
                ...order,
                services: services || [],
                service: services.map(s => s.service_name).join(', '), // –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
                price: order.total_price // –Ø–≤–Ω–æ –≤–∫–∞–∑—É—î–º–æ —Ü—ñ–Ω—É
            };
        }));

        // 3. –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const [user] = await db.execute(
            'SELECT first_name, last_name, vin_code FROM users WHERE id = ?',
            [userId]
        );

        res.json({
            user_name: user.length ? `${user[0].first_name} ${user[0].last_name}` : '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á',
            user_vin: user.length ? user[0].vin_code : '–ù–µ–≤—ñ–¥–æ–º–∏–π VIN',
            orders: ordersWithServices
        });

    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};




const OrderList = async (req, res) => {
    try {
        const [orders] = await db.query(`
          SELECT o.id, o.user_id, o.total_price, o.status, o.created_at, 
       GROUP_CONCAT(s.service_name SEPARATOR ', ') AS services
FROM orders o
LEFT JOIN order_services os ON o.id = os.order_id
LEFT JOIN services s ON os.service_id = s.id
GROUP BY o.id
ORDER BY o.created_at DESC;

        `);

        res.json(orders);
    } catch (error) {
        console.error('Error fetching orders:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
}


const confirmOrder = async (req, res) => {
    const { id } = req.params;

    try {
        const result = await db.query(
            'UPDATE orders SET status = "confirmed" WHERE id = ?',
            [id]
        );

        if (result.affectedRows === 0) {
            return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        res.json({ message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
        res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};

module.exports = {
    createOrder,
    getOrdersForUser,
    updateOrderStatus,
    payForOrder,
    resetOrderStatus,
    cancelOrder,
    completeOrder,
    validateServiceByVin, // Ensure this is included
    getOrderHistory,
    OrderList,
    confirmOrder
};
